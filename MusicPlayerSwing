import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.advanced.AdvancedPlayer;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class MusicPlayerSwing {

    private AdvancedPlayer player;
    private Thread playerThread;
    private JSlider volumeSlider;
    // Update the path to your actual file location
    private static final String FILE_PATH = "C:/Users/Jeffrey/Desktop/Music Player/愛在記憶中找你 - 林峯.mp3";

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MusicPlayerSwing::new);
    }

    public MusicPlayerSwing() {
        JFrame frame = new JFrame("Simple Music Player");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 300);

        JPanel panel = new JPanel();
        frame.add(panel);
        placeComponents(panel);

        frame.setVisible(true);

        // Automatically load and play the provided file
        loadAndPlayFile(FILE_PATH);
    }

    private void placeComponents(JPanel panel) {
        panel.setLayout(null);

        JButton openButton = new JButton("Open Music File");
        openButton.setBounds(10, 20, 160, 25);
        openButton.addActionListener(this::openFile);
        panel.add(openButton);

        JButton playButton = new JButton("Play");
        playButton.setBounds(180, 20, 80, 25);
        playButton.addActionListener(this::playMusic);
        panel.add(playButton);

        JButton pauseButton = new JButton("Pause");
        pauseButton.setBounds(270, 20, 80, 25);
        pauseButton.addActionListener(this::pauseMusic);
        panel.add(pauseButton);

        JButton stopButton = new JButton("Stop");
        stopButton.setBounds(360, 20, 80, 25);
        stopButton.addActionListener(this::stopMusic);
        panel.add(stopButton);

        JLabel volumeLabel = new JLabel("Volume:");
        volumeLabel.setBounds(10, 60, 80, 25);
        panel.add(volumeLabel);

        volumeSlider = new JSlider(JSlider.HORIZONTAL, 0, 100, 50);
        volumeSlider.setBounds(100, 60, 300, 25);
        volumeSlider.addChangeListener(e -> adjustVolume());
        panel.add(volumeSlider);
    }

    private void openFile(ActionEvent e) {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            loadAndPlayFile(file.getPath());
        }
    }

    private void loadAndPlayFile(String filePath) {
        stopCurrentPlayer();

        playerThread = new Thread(() -> {
            try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
                player = new AdvancedPlayer(fileInputStream);
                player.play();
            } catch (JavaLayerException | IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error loading or playing file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        playerThread.start();
    }

    private void playMusic(ActionEvent e) {
        // Not directly supported by JLayer
    }

    private void pauseMusic(ActionEvent e) {
        // Not directly supported by JLayer
    }

    private void stopMusic(ActionEvent e) {
        stopCurrentPlayer();
    }

    private void stopCurrentPlayer() {
        if (playerThread != null && playerThread.isAlive()) {
            playerThread.interrupt();
            try {
                player.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private void adjustVolume() {
        // Volume adjustment not supported by JLayer directly
    }
}
